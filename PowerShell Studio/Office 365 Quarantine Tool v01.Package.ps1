#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 6b2212f1-53da-4dca-9506-3d0dffe670e2
# Source File: E:\PowerShell Studio\Files\Office 365 Quarantine Tool\Office 365 Quarantine Tool v01.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ISAAAB+LCAAAAAAABADVWltT4kgUfp+q+Q9deV1KCIjoFmZLo+5Y622B0d0nq0kO0judNNvd4bK/
fk8nAbmNdFCYGrUs6ZzT5/adG9hsQSCGICcXVFOCfygm4lOn6nifPxHSvJfshcWUXzEOdzQC777X
YwGQ2lGd/JlQSWPNYiAdITgZVtyDgeo1yytM2VXdfyDQRE8GcOq0J0pDdPDE4lCM1MGVkFH2u0TW
PSqRx1yzw4OK+S4RP+E6kXAaQ6Il5SXykHQ5C/6ASUd8g/i022jQelA/ck9qh1A5PnFIjKqcOj28
75ay2CFBn/FQIqnji1hLwVVmNOr6IMUApJ7kPD5nEOs2+w8cz60dovTD45NmeUr1HS5juuNN5W0k
b2sq9YNQTKOdjuejRJDtQAJs5u3AWDsbYrN6yeUQZeQ33Agavir7bF42yynBlHpz/HwRdcW5GO88
hoER1BVjBBj66K1IrrrqLA76QjpeRwxKpMVe+nrFMatMxgCq0Z0vlzHtckBXdWQCFpzX6Ic5bZDA
nCx6sa0l3lwikQqE5Kz7EZ7y2kkar2bZyPsR8iEOQZ6FGBelfpgWF0yiE/CSJQ0sIncjApqloltp
HJeIW7dgynJ+EZ8WbHlpqbolUl1N1DX5TrvX6N6x4zVsqNPqMAPEZnqsGB02cAjymSiGeIRod8hA
iiHDqJ46Gkk0G7iO99SnmvQY8JCEgkxEQkZYeIgWRAGVQf+3dQLnK08bOKoFYWqQ36fxi0mvRRc+
ryNaqk/lrEDZl6u7JALJgq+DCzGKd16z4iTqgrzvZQVh9yVrDr7VSt0Svrd0zKIkMpDHL2u8L9hm
DfdDg3YbIa9oP/po9N6lmhPRIxGWKfoCyiBXAoZ4teuuynqkHG/21lhRHI4mS/fRPDXKwcS6zey9
DrfD4rnQWuC0dgM9vRUoazhE1Q+tIbastX1RdevVwjizyZWsqvpiMCE0DsmAYtQIneLoOiR9kDYT
QiG8ZuLIzA2kJwX20T7k1RahqxAXitAuTvU/HyrbqRXvKI/vwWOBDr+grj0WK/WTwli0ok6xeGk2
BtOC5RQNgWR4xGhhLI4j/qsa0ADPBggpkEOwA+gGHQ7IEwY2oDJEiErMlwSrCIYg+PxJCRLjD0Bo
SnC6/WBiTTK2TUOEccBsdlgIzvPco8WJYekKhKgZBJbZ8+P3DhvnCdbL3U8Z3VTMu7NomyHDlFm3
Zp1B85paJ1ADB5mqjYzX9LEap7MB2VaXrwoemUoob+sJh3MafPMFT333nZ1wHmY+hvHbovnP6dl7
EWbewPldsvCRwWjnOAtR2AsKG6KwVtZyCsKNczFCR8qOwB2xhTo63hXlyqZKzfFe4F6gYWv2e4nl
C4OXRLGyXukXMmW7OegMy55BdC76VoQIblx1uAVvxvMFKKquvoCRaK7K7pheXDB3cRarWmfumthb
8LZQ4fuYT6zdPH27zT1C7SpWk/8s6W2MKTR3tRenq6yV/Y3LbkBj4ndaN7/4abPKFuHpFryxbfnA
uckVPMnrwhrnPi9TvdnG5uFxKxIFb128lvananWXY6bft8Fs1esKbi+vuu6y1dnok0+Kdpp8XKMz
Aj+mze0VXS1sL1TB3gHmNtxtAJaru0uMWVGnGLNXplAl7vSZIiNslViMUwG4Dv87+7QjnO7fpIuP
QiLi14V8r4DPrd+I+cUXFvt45qvd7+NTh5NyptqZUhAhK6ipGfnJxPvAd+yb5dmty1Iyg/ch48Od
ulmiGd73I0jSUfoxS3FZlVqv3mv0XDesV2iNbpb1V8T3Y1P6IY+QkzbIIQtgq5AVts4XEvZiXm4V
Fh80bQe2zV5mud0sz/9LgPc/IzGNGyEgAAA=#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.122
     Generated on:       31/05/2016 16:22
     Generated by:       mtunc
     Organization:       Royal Academy of Music
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2016
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-Office_365_Quarantine_Tool_v01_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$comboboxFilter = New-Object 'System.Windows.Forms.ComboBox'
	$numberOfItems = New-Object 'System.Windows.Forms.NumericUpDown'
	$textboxMessageId = New-Object 'System.Windows.Forms.TextBox'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonRelease = New-Object 'System.Windows.Forms.Button'
	$tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	<# 
	.DESCRIPTION
	A simple Office 365 quarantine viewer. I find the web interface to be super slow and buggy and as I use it several times a week I thought I'd put some time in to
	creating a PowerShell implementation. Also this tool will allow you to wildcard search the Subject, Sender and Direction fields; the web interface doesn't give you that flexibility.
	Unfortunately Microsoft doesn't make it easy to filter by recipient without first specifying the -Identity. Maybe I'll get round to doing that later.
	You will be prompted for your Office 365 credentials as soon as you double click the .exe. The appropriate modules will load if the credentials and permissions are correct.
	.NOTES
	Author: Mikail Tunç
	Web: https://emtunc.org/blog/
	v01 - 31-05-2016: 	Initial version
	#>
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	#endregion
	
	#region Search Function
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$seachString = $textboxSearch.Text
		
		if($seachString -eq "")
		{
			return
		}
		
		if($datagridviewResults.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewResults.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewResults.ColumnCount
		$rowCount = $datagridviewResults.RowCount
		for(;$RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewResults.Rows[$RowIndex]
			
			for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if($cell.Value -ne $null -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewResults.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewResults.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
		
	}
	#endregion
	
	$formMain_Load={
		$UserCredential = Get-Credential
		$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $UserCredential -Authentication Basic -AllowRedirection
		Import-PSSession $Session -CommandName "*Quarantine*" -DisableNameChecking
	}
	
	$buttonExit_Click = {
		Get-PSSession | Remove-PSSession
		$formMain.Close()
	}
	
	$buttonRelease_Click = {
		$this.enabled = $false
		Get-QuarantineMessage -MessageId $textboxMessageId.text | Release-QuarantineMessage -ReleaseToAll
		#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
		[void][System.Windows.Forms.MessageBox]::Show('Message released', 'Message released')
		$this.enabled = $true
	}
	
	$buttonSearch_Click={
		$this.enabled = $false
		if (!$textboxSearch.Text)
		{
			$quarantinedMessages = Get-QuarantineMessage -PageSize $numberOfItems.Value | Select-Object ReceivedTime, Type, Direction, SenderAddress, Subject, Size, Expires, MessageId
			$table = ConvertTo-DataTable -InputObject $quarantinedMessages
			Load-DataGridView -DataGridView $datagridviewResults -Item $table
		}
		else
		{
			$filter = $comboboxFilter.Text
			$quarantinedMessages = Get-QuarantineMessage -PageSize $numberOfItems.Value | Where-Object { $_.$filter -like "*" + $textboxSearch.Text + "*"} | Select-Object ReceivedTime, Type, Direction, SenderAddress, Subject, Size, Expires, MessageId
			$table = ConvertTo-DataTable -InputObject $quarantinedMessages
			Load-DataGridView -DataGridView $datagridviewResults -Item $table
		}
		$this.enabled = $true
	}
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
		if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
		{
			SearchGrid	
			$_.SuppressKeyPress = $true
		}
	}
	
	$datagridviewResults_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	}
	
	$textboxSearch_TextChanged={
	}
	
	$comboboxFilter_SelectedIndexChanged={
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$comboboxFilter.remove_SelectedIndexChanged($comboboxFilter_SelectedIndexChanged)
			$textboxSearch.remove_TextChanged($textboxSearch_TextChanged)
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$datagridviewResults.remove_CellContentClick($datagridviewResults_CellContentClick)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonRelease.remove_Click($buttonRelease_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	$numberOfItems.BeginInit()
	#
	# formMain
	#
	$formMain.Controls.Add($comboboxFilter)
	$formMain.Controls.Add($numberOfItems)
	$formMain.Controls.Add($textboxMessageId)
	$formMain.Controls.Add($textboxSearch)
	$formMain.Controls.Add($buttonSearch)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.Controls.Add($buttonRelease)
	$formMain.ClientSize = '1340, 489'
	$formMain.Name = 'formMain'
	$formMain.StartPosition = 'CenterScreen'
	$formMain.Text = 'Office 365 Quarantine Tool v01'
	$formMain.add_Load($formMain_Load)
	#
	# comboboxFilter
	#
	$comboboxFilter.Anchor = 'Top, Right'
	$comboboxFilter.FormattingEnabled = $True
	[void]$comboboxFilter.Items.Add('Subject')
	[void]$comboboxFilter.Items.Add('SenderAddress')
	[void]$comboboxFilter.Items.Add('Direction')
	$comboboxFilter.Location = '1078, 15'
	$comboboxFilter.Name = 'comboboxFilter'
	$comboboxFilter.Size = '121, 21'
	$comboboxFilter.TabIndex = 7
	$comboboxFilter.Text = 'Subject'
	$tooltip1.SetToolTip($comboboxFilter, 'What field do you want to search?')
	$comboboxFilter.add_SelectedIndexChanged($comboboxFilter_SelectedIndexChanged)
	#
	# numberOfItems
	#
	$numberOfItems.Anchor = 'Top, Right'
	$numberOfItems.Location = '1205, 15'
	$numberOfItems.Maximum = 10000
	$numberOfItems.Name = 'numberOfItems'
	$numberOfItems.Size = '41, 20'
	$numberOfItems.TabIndex = 6
	$tooltip1.SetToolTip($numberOfItems, 'Number of messages to return')
	$numberOfItems.Value = 20
	#
	# textboxMessageId
	#
	$textboxMessageId.Anchor = 'Bottom, Left, Right'
	$textboxMessageId.Location = '13, 454'
	$textboxMessageId.Name = 'textboxMessageId'
	$textboxMessageId.Size = '1152, 20'
	$textboxMessageId.TabIndex = 5
	$textboxMessageId.Text = 'Copy and paste a messageId here'
	$tooltip1.SetToolTip($textboxMessageId, 'Copy a MessageId from the search results above')
	#
	# textboxSearch
	#
	$textboxSearch.Anchor = 'Top, Left, Right'
	$textboxSearch.Location = '13, 15'
	$textboxSearch.Name = 'textboxSearch'
	$textboxSearch.Size = '1059, 20'
	$textboxSearch.TabIndex = 0
	$textboxSearch.Text = 'Enter your search criteria here'
	$tooltip1.SetToolTip($textboxSearch, 'Enter your search criteria here. Wildcards are automatic
so no need to enter any here.')
	$textboxSearch.add_TextChanged($textboxSearch_TextChanged)
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# buttonSearch
	#
	$buttonSearch.Anchor = 'Top, Right'
	$buttonSearch.Location = '1252, 13'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 1
	$buttonSearch.Text = 'Search'
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.AllowUserToOrderColumns = $True
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.AutoSizeColumnsMode = 'Fill'
	$datagridviewResults.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewResults.Location = '12, 42'
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.Size = '1316, 406'
	$datagridviewResults.TabIndex = 2
	$tooltip1.SetToolTip($datagridviewResults, 'Search results here. You can CTRL+C any field you want.')
	$datagridviewResults.add_CellContentClick($datagridviewResults_CellContentClick)
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '1253, 454'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 4
	$buttonExit.Text = 'Exit'
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonRelease
	#
	$buttonRelease.Anchor = 'Bottom, Right'
	$buttonRelease.Location = '1171, 454'
	$buttonRelease.Name = 'buttonRelease'
	$buttonRelease.Size = '75, 23'
	$buttonRelease.TabIndex = 3
	$buttonRelease.Text = 'Release'
	$tooltip1.SetToolTip($buttonRelease, 'This will release a quarantined message based on messageId')
	$buttonRelease.UseVisualStyleBackColor = $True
	$buttonRelease.add_Click($buttonRelease_Click)
	#
	# tooltip1
	#
	$numberOfItems.EndInit()
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formMain.ShowDialog()

} #End Function

#Call the form
Call-Office_365_Quarantine_Tool_v01_psf | Out-Null
